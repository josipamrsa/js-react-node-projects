{"version":3,"sources":["components/Forma.js","components/Osoba.js","components/Filter.js","components/Pogreska.js","services/poruke.js","App.js","index.js"],"names":["Forma","props","onSubmit","submitDogadjaj","value","inputVrijednost","ime","onChange","unosVrijednosti","id","placeholder","email","type","className","oznaka","toLowerCase","Osoba","osoba","promjenaOsobe","brisanjeOsobe","useState","forma","postaviFormu","unosOsobe","postaviUnos","e","preventDefault","polje","target","noviObjekt","onClick","Filter","filterMetoda","Pogreska","info","axios","get","console","log","post","put","delete","App","osobe","postaviOsobe","postaviPromjenuPodatka","pogreska","postaviPogresku","filter","postaviFilter","useEffect","serverPoruke","then","response","data","provjeraUnosa","RegExp","test","o","match","map","os","key","podatakOsoba","promjena","find","izmijeniOsobu","greska","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45845b04.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Forma = (props) => {\r\n    return (\r\n        <div>            \r\n            <form onSubmit={props.submitDogadjaj}>\r\n                <input value={props.inputVrijednost.ime} onChange={props.unosVrijednosti} id=\"ime\" placeholder=\"Unesi ime i prezime...\" />\r\n                <input value={props.inputVrijednost.email} onChange={props.unosVrijednosti} id=\"email\" placeholder=\"Unesi email adresu...\" />\r\n                <button type=\"submit\" className={props.oznaka.toLowerCase() + \"-btn\"}>{props.oznaka}</button>\r\n            </form>\r\n        </div>   \r\n    );\r\n};\r\n\r\nexport default Forma;","import React, { useState } from 'react';\r\nimport Forma from './Forma';\r\n\r\nconst Osoba = ({osoba, promjenaOsobe, brisanjeOsobe}) => {\r\n    // Pokušaj broj 2 - uspješan!\r\n\r\n    const [forma, postaviFormu] = useState(false);                                      // Postavi vidljivost forme\r\n    const [unosOsobe, postaviUnos] = useState({ ime: osoba.ime, email: osoba.email });  // Postavi unos podataka\r\n\r\n    const promjenaVidljivosti = (flag) => {\r\n        postaviFormu(!flag);\r\n    }; \r\n\r\n    // Kontrolirana komponenta inputa\r\n    const promjenaUnosa = (e) => {\r\n        let polje = e.target.id;            // dohvati id input polja (odgovara poljima objekta)\r\n        let noviObjekt = {...unosOsobe};    // kopiraj svojstvo kao novi objekt\r\n        noviObjekt[polje] = e.target.value  // postavi polje novog objekta određenog id-om inputa na novu vrijednost (input)\r\n        postaviUnos(noviObjekt);            // postavi unos na novi objekt\r\n    } \r\n\r\n    const izmjenaForma = (e) => {\r\n        e.preventDefault();         // Preventiraj osvježavanje forme\r\n        promjenaOsobe(unosOsobe);   // Postavi svojstvo iz glavne komponente za promjenu podataka\r\n        postaviFormu(false);        // Postavi vidljivost forme nazad na false\r\n    }\r\n    \r\n    return (\r\n        <li><p>{osoba.ime} ({osoba.email})</p>\r\n            { forma ? \r\n                <div className=\"kontrole\">\r\n                    <Forma submitDogadjaj={izmjenaForma} \r\n                           inputVrijednost={unosOsobe} \r\n                           unosVrijednosti={promjenaUnosa}\r\n                           oznaka=\"Spremi\" />\r\n                </div> : \r\n                <div className=\"kontrole\">\r\n                    <button onClick={() => promjenaVidljivosti(forma)} className=\"izmijeni-btn\">Izmjena</button>\r\n                    <button onClick={brisanjeOsobe} className=\"brisi-btn\">Briši</button> \r\n                </div>\r\n            } \r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Osoba;","import React from 'react';\r\n\r\nconst Filter = (props) => {\r\n    return (\r\n        <input placeholder=\"Filtriraj osobe: \" onChange={props.filterMetoda} className=\"filter-input\" />\r\n    )\r\n}\r\n\r\nexport default Filter;","import React from 'react';\r\n\r\nconst Pogreska = (props) => {\r\n    return (\r\n        <div>{ props.info ? <div>{props.info}</div> : null }</div>\r\n    );\r\n}\r\n\r\nexport default Pogreska;","import axios from 'axios';\r\n\r\n// const SERVER_URL = 'http://localhost:3001/api/osobe';\r\nconst SERVER_URL = '/api/osobe';\r\n\r\n// Delegat dohvata podataka\r\nconst dohvatPodataka = () => {\r\n    return axios.get(SERVER_URL);\r\n};\r\n\r\n// Delegat unosa novog podatka u listu\r\nconst stvaranjePodatka = noviObjekt => {\r\n    console.log(noviObjekt);\r\n    return axios.post(SERVER_URL, noviObjekt);\r\n};\r\n\r\n// Delegat osvježavanja podataka\r\nconst osvjezavanjePodataka = (id, noviObjekt) => {\r\n    return axios.put(`${SERVER_URL}/${id}`, noviObjekt);\r\n};\r\n\r\n// Delegat brisanja jednog podatka iz liste\r\nconst brisanjePodatka = id => {\r\n    return axios.delete(`${SERVER_URL}/${id}`);\r\n};\r\n\r\nexport default {\r\n    dohvatPodataka, \r\n    stvaranjePodatka, \r\n    osvjezavanjePodataka, \r\n    brisanjePodatka\r\n};","import React, { useState, useEffect } from 'react';\r\n// komponente\r\nimport Osoba from './components/Osoba';\r\nimport Filter from './components/Filter';\r\nimport Pogreska from './components/Pogreska';\r\nimport Forma from './components/Forma';\r\n// poruke sa servera\r\nimport serverPoruke from './services/poruke';\r\n// stil\r\nimport './index.css';\r\n\r\nconst App = (props) => {\r\n    const REGEX_EMAIL = \"^[a-zA-Z0-9.! #$%&'*+/=? ^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+)*$\";\r\n    \r\n    const [osobe, postaviOsobe] = useState([]);\r\n    const [unosOsobe, postaviUnos] = useState({ ime: \"\", email: \"\" });\r\n    const [podatakOsoba, postaviPromjenuPodatka] = useState(null);\r\n    const [pogreska, postaviPogresku] = useState(\"\");\r\n    const [filter, postaviFilter] = useState(\"\");\r\n     \r\n    // Dohvat podataka\r\n    useEffect(() => {\r\n        serverPoruke.dohvatPodataka()\r\n        .then((response) => {\r\n            postaviOsobe(response.data);\r\n        });\r\n    }, []);\r\n\r\n    // Kontrolirana komponenta inputa\r\n    const promjenaUnosa = (e) => {\r\n        let polje = e.target.id;            // dohvati id input polja (odgovara poljima objekta)\r\n        let noviObjekt = {...unosOsobe};    // kopiraj svojstvo kao novi objekt\r\n        noviObjekt[polje] = e.target.value  // postavi polje novog objekta određenog id-om inputa na novu vrijednost (input)\r\n        postaviUnos(noviObjekt);            // postavi unos na novi objekt\r\n    }\r\n\r\n    const provjeraUnosa = (osoba) => {   \r\n        // Ako su jedno ili oba polja prazna \r\n        if (!osoba.ime || !osoba.email) { return \"Unesite sve podatke!\"; }\r\n        // Testiranje za oblik email adrese\r\n        else if (!new RegExp(REGEX_EMAIL).test(osoba.email)) {\r\n            return \"Format email adrese nije ispravan!\";\r\n        }\r\n        // Unosi su ispravni\r\n        else { return \"\"; }\r\n    }\r\n\r\n    // Filtriranje imena\r\n    const filtrirajImena = (e) => {  \r\n        // Postavi filter na vrijednost inputa\r\n        postaviFilter(e.target.value);\r\n    }\r\n\r\n    // Stvaranje nove osobe\r\n    const novaOsoba = (e) => {\r\n        e.preventDefault();\r\n\r\n        const noviObjekt = {\r\n            ime: unosOsobe.ime,\r\n            email: unosOsobe.email\r\n        }\r\n\r\n        let greska = provjeraUnosa(noviObjekt);\r\n\r\n        // Problem - ovako ne ažurira odmah vrijednost greške ukoliko postoji - zašto?\r\n        postaviPogresku(provjeraUnosa(noviObjekt));\r\n\r\n        // Dakle ako NEMA pogreške, unos prolazi\r\n        if (!greska) {\r\n            serverPoruke.stvaranjePodatka(noviObjekt)\r\n            .then((response) => {\r\n                console.log(response);\r\n                postaviOsobe(osobe.concat(response.data));\r\n                postaviUnos({\r\n                    ime: '',\r\n                    email: ''\r\n                });\r\n            }); \r\n        } \r\n    };\r\n\r\n    // Izmjena postojeće osobe\r\n    const izmijeniOsobu = (id, promjena) => {\r\n        const osoba = osobe.find(os => os.id === id);\r\n\r\n        const noviObjekt = {\r\n            ...osoba,\r\n            ime: promjena.ime,\r\n            email: promjena.email\r\n        }; \r\n       \r\n        serverPoruke.osvjezavanjePodataka(id, noviObjekt)\r\n        .then((response) => {\r\n            postaviOsobe(\r\n                // filtriraj tako da ukoliko je isti ID, prikaze\r\n                // se novi, azurirani podatak\r\n                osobe.map(os => os.id !== id ? os : response.data) \r\n            );\r\n        });\r\n    };\r\n\r\n    // Brisanje osobe\r\n    const obrisiOsobu = (id) => {\r\n        serverPoruke.brisanjePodatka(id)\r\n        .then((response) => {\r\n            // filtriraj listu tako da nema izbrisane osobe\r\n            postaviOsobe(osobe.filter(os => os.id !== id));\r\n        });\r\n        \r\n    };\r\n\r\n    return (\r\n            <div className=\"container\">\r\n                <h1>Adresar</h1>\r\n                <Filter filterMetoda={filtrirajImena} />\r\n            \r\n                <ul>\r\n                    {   /* Prvo filtriraj po onom što ima, a onda mapiraj */\r\n                        osobe.filter(o => o.ime.toLowerCase().match(filter.toLowerCase())) \r\n                            .map(os => \r\n                            <Osoba key={os.id}\r\n                                osoba={os}\r\n                                brisanjeOsobe={() => obrisiOsobu(os.id)}\r\n                                promjenaOsobe={podatakOsoba => {\r\n                                    // Dohvati primljeni podatak iz Child komponente\r\n                                    postaviPromjenuPodatka(podatakOsoba);\r\n                                    // S primljenim podacima tada pozovi ažuriranje\r\n                                    izmijeniOsobu(os.id, podatakOsoba);\r\n                                }} />\r\n                            )}\r\n                </ul>\r\n\r\n                <h2>Unesi novi kontakt</h2>\r\n                <Forma submitDogadjaj={novaOsoba}\r\n                    inputVrijednost={unosOsobe}\r\n                    unosVrijednosti={promjenaUnosa}\r\n                    oznaka=\"Dodaj\" />\r\n                <Pogreska info={pogreska} />\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}